import sys
import datetime
import json

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

for folders in ['logs/', 'mysql_db/', 'tg_bot/', 'config/']:
    sys.path.append(folders)

from functions import speardsheets_connection_check, search_ranges, compare_of_values, compare_of_ranges
from mysql_db_init import db_connection_check, setup_db
from db_functions import user_id_tables, tg_user_id_list, insert_new_users, insert_new_sheets_info
from db_functions import extraction_query, tracked_tables, delete_spreadsheets
from config import SERVICE_ACCOUNT_FILE, SCOPES, tg_token, host, port, user, db_name, password
from logger import log_error

with open('tg_bot/messages.json', 'r') as file:
    messages_dict = json.load(file)

bot = Bot(token=tg_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class UserState(StatesGroup):
    """
    –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π 
    """
    table_name = State()
    sheet_number = State()
    range = State()
    interval = State()
    tables_manage = State()

async def bot_messages(key: str, language_code: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é messages_dict –∏–∑ —Ñ–∞–π–ª–∞ messages.json —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —è–∑—ã–∫–∞
    """
    text = messages_dict[key][language_code]
    return text

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —è–∑—ã–∫–∞
    """
    markup = InlineKeyboardMarkup()
    item_1 = InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="Russian")
    item_2 = InlineKeyboardButton(text="üá¨üáß English", callback_data="English")
    markup.add(item_1, item_2)

    await message.answer(text="–í—ã–±–µ—Ä–∏ —è–∑—ã–∫/Choose language:", reply_markup=markup)

@dp.callback_query_handler(lambda callback_query: callback_query.data in ["Russian", "English"])
async def general_instruction(callback_query: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —à–∞–≥–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
    –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü–∞.
    """
    global language
    if callback_query.data == "Russian":
        language = 'ru'
    else:
        language = 'eng'

    try:
        now = datetime.datetime.now()
        user_id = callback_query.message.chat.id
        connection = await db_connection_check(host, port, user, password, user_id)
        users_telegram_id = [value[0] for value in await tg_user_id_list(connection)]

        if user_id not in users_telegram_id: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –ø–æ–¥–∫–ª—é—á–∞–ª—Å—è –ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –±–æ—Ç—É
            await insert_new_users(connection, user_id, now) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
            text_1 = await bot_messages("fisrt_instruction", language)
            text_2 = await bot_messages("add_account_bottom", language)

            markup = InlineKeyboardMarkup()
            item = InlineKeyboardButton(text=text_2, callback_data="account_added")
            markup.add(item)
            await bot.send_message(chat_id=user_id, text=text_1, parse_mode="HTML", reply_markup=markup)

        else: 
            markup = InlineKeyboardMarkup()
            item = InlineKeyboardButton(
                text="bup", callback_data="account_added")
            markup.add(item)
            await bot.send_message(chat_id=user_id, text='Welcome back', parse_mode=None, reply_markup=markup)

    except Exception as ex:
        log_error(f"Respone from general_instruction: {ex}")

@dp.callback_query_handler(lambda callback_query: callback_query.data in ["account_added", "retry"])
async def account_added_handler(callback_query: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–∫–ø–∏ "account_added" –∏ "retry", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.table_name,
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    """
    user_id = callback_query.message.chat.id
    text=await bot_messages("spreadsheet_name", language)

    await UserState.table_name.set()
    await bot.send_message(chat_id=user_id, text=text)

@dp.message_handler(state=UserState.table_name)
async def enter_table_name(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è UserState.table_name, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ account_added_handler,
    –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ state.proxy() –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.sheet_number
    """
    async with state.proxy() as data:
        data['table_name'] = message.text
    text = await bot_messages("page_number", language)

    await UserState.sheet_number.set()
    await message.answer(text=text)

@dp.message_handler(state=UserState.sheet_number)
async def enter_sheet_number(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è UserState.sheet_number, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ enter_table_name,
    –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ state.proxy() –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é connection_check, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ–π
    """
    text_1 = await bot_messages("sheet_conn", language)
    text_2 = await bot_messages("input_check", language)
    
    try:
        user_id = message.chat.id
        try:
            sheet_number = int(message.text)

            async with state.proxy() as data:
                data['sheet_number'] = sheet_number

            await state.reset_state(with_data=False)
            await message.answer(text=text_1)
            await connection_check(user_id, state)

        except ValueError:
            await bot.send_message(chat_id=user_id,
                                text=text_2)
            
    except Exception as ex:
        log_error(f"Respone from enter_sheet_number: {ex}")

async def connection_check(user_id, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ enter_sheet_number, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å google —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–∞–Ω–Ω—ã–º
    –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: –ø–æ–ª–Ω—ã–π, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π. 
    –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–≤–µ—Å—Ç–∏ –∏—Ö –∑–∞–Ω–æ–≤–æ
    """
    try:
        async with state.proxy() as data:
            table_name = data['table_name']
            sheet_number = data['sheet_number']
            conn = await speardsheets_connection_check(
                SERVICE_ACCOUNT_FILE, SCOPES, table_name, sheet_number) # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google —Ç–∞–±–ª–∏—Ü–µ–π

        if conn[0]: # –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            text_1 = await bot_messages("input_renge_1", language)
            text_2 = await bot_messages("input_renge_2", language)
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text=text_1, callback_data="dynamic"),
                        types.InlineKeyboardButton(
                            text=text_2, callback_data="fix"),
                    ]
                ]
            )
            text_3 = await bot_messages("succes_conn", language)
            await bot.send_message(chat_id=user_id, text=text_3, parse_mode="HTML", reply_markup=keyboard)

        else: # –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –≤–≤–µ—Å—Ç–∏ –∏—Ö –∑–∞–Ω–æ–≤–æ
            text_4 = await bot_messages("retry", language)
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text=text_4, callback_data="retry"),
                    ]
                ]
            )
            text_5 = await bot_messages("conn_error", language)
            await bot.send_message(
                chat_id=user_id, text=text_5.format(table_name, sheet_number), reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as ex:
        log_error(f"Respone from connection_check: {ex}")
    
@dp.callback_query_handler(lambda callback_query: callback_query.data in ["dynamic", "fix"])
async def range_input(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "dynamic" –∏ "fix". 
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "fix", —Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ UserState.range –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "dynamic", —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ UserState.interval, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    search_ranges –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –≤–æ–≤–∑—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–æ—Ä–∏–¥–Ω–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ A1:B1
    """
    try:
        user_id = callback_query.message.chat.id
        text_1 = await bot_messages("enter_range", language)

        if callback_query.data == 'fix':
            await UserState.range.set() # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π range_interval
            await bot.send_message(chat_id=user_id, text=text_1, parse_mode="HTML")

        elif callback_query.data == 'dynamic':
            await UserState.interval.set() # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π interavl_input
            async with state.proxy() as data:
                table_name = data['table_name']
                sheet_number = data['sheet_number']

            conn = await speardsheets_connection_check(
                SERVICE_ACCOUNT_FILE, SCOPES, table_name, sheet_number) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google —Ç–∞–±–ª–∏—Ü–µ–π
            all_data = await search_ranges(conn[1])  # –ø–æ–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –µ–≥–æ –∫–æ–æ—Ä–∏–¥–∏–Ω–∞—Ç

            left = all_data[0]['leftcol'] + str(all_data[0]['leftrow'])
            right = all_data[0]['rightcol'] + str(all_data[0]['rightrow'])
            start_range = left + ":" + right

            async with state.proxy() as data:
                data['range'] = 'dynamic'

            text_2 = await bot_messages("set_interval_1", language)
            await bot.send_message(chat_id=user_id,
                                text=text_2.format(start_range))
    except Exception as ex:
        log_error(f"Respone from range_input: {ex}")

@dp.message_handler(state=UserState.range)
async def range_interval(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.range, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ range_input, –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–æ—Ä–∏–¥–Ω–∞—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.interval
    """
    try:
        async with state.proxy() as data:
            table_name = data['table_name']
            sheet_number = data['sheet_number']

        conn = await speardsheets_connection_check(
            SERVICE_ACCOUNT_FILE, SCOPES, table_name, sheet_number) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google —Ç–∞–±–ª–∏—Ü–µ–π
        cell_values = await search_ranges(conn[1], message.text) # –§—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        #–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–æ—Ä–∏–¥–Ω–∞—Ç–∞–º, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False
        
        if False in cell_values:
            text_1 = await bot_messages("wrong_range", language)
            await message.answer(text=text_1, parse_mode="HTML")

        else:
            await UserState.interval.set()
            async with state.proxy() as data:
                data['range'] = message.text

            text_2 = await bot_messages("set_interval_2", language)
            await message.answer(text=text_2)

    except Exception as ex:
        log_error(f"Respone from range_interval: {ex}")

@dp.message_handler(state=UserState.interval)
async def interavl_input(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.interval —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–µ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö range_interval –∏ range_input
    –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ), —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
    """
    user_id = message.chat.id
    text_1 = await bot_messages("start_tracking", language)
    try:
        async with state.proxy() as data:
            data["interval_value"] = int(message.text) * 60

        markup = InlineKeyboardMarkup()
        item = InlineKeyboardButton(
            text=text_1, callback_data="starting")
        markup.add(item)
        text_2 = await bot_messages("notice", language)

        await state.reset_state(with_data=False) #—Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSMContext
        await message.answer(text_2.format(message.text), parse_mode="HTML", reply_markup=markup)

    except ValueError:
        text_3 = await bot_messages("wrong_interval", language)
        await bot.send_message(chat_id=user_id,
                               text=text_3)

async def sheets_manage(user_id: int):
    """
    –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "starting" –≤ —Ñ—É–Ω–∫—Ü–∏–∏ interavl_input, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–µ–Ω—é –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
    'Add table' - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    'Delete table' - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü, —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—É
    """
    text_1 = await bot_messages("add_table", language)
    text_2 = await bot_messages("delete_table", language)
    try:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        commands = [text_1, text_2]
        keyboard.add(*commands)
        text_3 = await bot_messages("notice_2", language)

        await bot.send_message(chat_id=user_id, text=text_3, reply_markup=keyboard)
    
    except Exception as ex:
        log_error(f"Respone from search_comparisons_init: {ex}")

async def loop(table_name: str, sheet_number: int, user_range: str, user_id: str , state: FSMContext) -> None: 
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é interval –≤ google —Ç–∞–±–ª–∏—Ü–µ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ search_comparisons_init
    """
    cell_values_list = []
    while True: 
        conn = await speardsheets_connection_check(SERVICE_ACCOUNT_FILE, SCOPES, table_name, sheet_number) # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å google —Ç–∞–±–ª–∏—Ü–µ–π
        cell_values = await search_ranges(conn[1], user_range) # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —è—á–µ–π–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ user_range (dynamic –∏–ª–∏  fix)
        cell_values_list.append(cell_values[1]) 

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–∏–¥–∏–Ω–∞—Ç –∏–∑ cell_values[0] = {'leftcol': 'A', 'leftrow': 1, 'rightcol': 'A', 'rightrow': 3} –≤ —Ñ–æ—Ä–º–∞—Ç A1:A3
        current_range = f"{cell_values[0]['leftcol']}{cell_values[0]['leftrow']}:{cell_values[0]['rightcol']}{cell_values[0]['rightrow']}"

        if len(cell_values_list) == 2: # –µ—Å–ª–∏ –≤ cell_values_list –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ –∑–∞ 2 –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            # —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É cell_values_list[0] –∏ cell_values_list[1] 
            range_changes = await compare_of_ranges(cell_values_list) # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤ google —Ç–∞–±–ª–∏—Ü—ã –∑–∞ 2 –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            value_comparison_result = await compare_of_values(cell_values_list) # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–æ–≤ google —Ç–∞–±–ª–∏—Ü—ã –∑–∞ 2 –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏

            if range_changes is False: # –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è) –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ –æ –Ω–æ–≤–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                await bot.send_message(chat_id=user_id, text=f"New Range {current_range}")
            
            if value_comparison_result[0] is not True: # –µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –º–∞—Å—Å–∏–≤–∞—Ö –µ—Å—Ç—å, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —è—á–µ–π–∫–∏, –∏–∑–º–µ–Ω–∏–≤—à–∏–µ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                for i in value_comparison_result[1]:
                    await bot.send_message(chat_id=user_id, text=f"Table: {table_name}, sheet: {sheet_number}, —Åell: {i}")

            cell_values_list.pop(0) # —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π —è—á–µ–µ–∫ –∏–∑ google —Ç–∞–±–ª–∏—Ü—ã

@dp.callback_query_handler(lambda callback_query: callback_query.data == "starting")
async def search_comparisons_init(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "starting" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é interval
    –¢–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–µ–Ω—é —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏ ['Add table', 'Delete table'] –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ 
    """
    user_id = callback_query.message.chat.id
    connection = await db_connection_check(host, port, user, password, user_id)
    user_number = await extraction_query(connection, user_id) # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥

    async with state.proxy() as data: 
        table_name = data['table_name']
        sheet_number = data['sheet_number']
        user_range = data['range']
        interval_value = data['interval_value']

    await insert_new_sheets_info(connection, user_number, table_name, sheet_number, user_range, interval_value, user_id) 
    try:
        user_id = callback_query.message.chat.id
        await sheets_manage(user_id) 
        await loop(table_name, sheet_number, user_range, user_id, state)
        await asyncio.sleep(interval_value)
        asyncio.create_task(loop())
    
    except Exception as ex:
        log_error(f"Respone from search_comparisons_init: {ex}")
    
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def command_handler(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ sheets_manage –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    """
    try:
        user_id = message.chat.id
        connection = await db_connection_check(host, port, user, password, user_id)
        user_number = await extraction_query(connection, user_id)
        user_tables = await tracked_tables(connection, user_number)

        if message.text in ['Add table', '–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É']:
            text_1 = await bot_messages("spreadsheet_name", language)
            await UserState.table_name.set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.table_name 
            await bot.send_message(chat_id=message.chat.id, text=text_1) # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ñ—É–Ω–∫—Ü–∏–∏ enter_table_name

        elif message.text in ['Delete table', '–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É']:
            user_tables_id = [value[0] for value in await user_id_tables(connection, user_number)] # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü

            if len(user_tables_id) == 0: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 
                text_2 = await bot_messages("empty_table_list", language)
                await bot.send_message(chat_id=message.chat.id, text=text_2)
            else:
                text_3 = await bot_messages("table_select", language)
                await UserState.tables_manage.set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.tables_manage –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                await bot.send_message(chat_id=message.chat.id, text=text_3)

                for rows in user_tables:
                    text_4 = await bot_messages("table_info", language)
                    await bot.send_message(chat_id=message.chat.id, text=text_4.format(rows[0], rows[2], rows[3], rows[4], rows[5]), parse_mode="HTML")

    except Exception as ex:
        log_error(f"Respone from command_handler: {ex}")
    
@dp.message_handler(state=UserState.tables_manage)
async def manage_table(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UserState.tables_manage, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ command_handler
    """
    user_id = message.chat.id
    connection = await db_connection_check(host, port, user, password, user_id)
    user_number = await extraction_query(connection, user_id) # –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_tables_id = [value[0] for value in await user_id_tables(connection, user_number)] # –∫–æ–ª-–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∞–±–ª–∏—Ü
    try:
        table_id = int(message.text)
        if table_id in user_tables_id: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ—á–Ω–µ, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è delete_spreadsheets —É–¥–∞–ª—è–µ—Ç –µ–µ –∏–∑ –±–¥
            text_1 = await bot_messages("succes_delete", language)
            await delete_spreadsheets(connection, table_id, user_number)
            await bot.send_message(chat_id=message.chat.id, text=text_1)
            await state.finish()

        elif table_id not in user_tables_id and user_tables_id != []:
            text_2 = await bot_messages("non_existent_table", language)
            await bot.send_message(chat_id=message.chat.id, text=text_2)
            await state.finish()

        elif len(user_tables_id) == 0:
            text_3 = await bot_messages("empty_table_list", language)
            await bot.send_message(chat_id=message.chat.id, text=text_3)
            await state.finish()

    except ValueError:
        text_4 = await bot_messages("input_check", language)
        await bot.send_message(chat_id=message.chat.id, text=text_4)

if __name__ == '__main__':
    setup_db(host, port, user, password, db_name)
    executor.start_polling(dp, skip_updates=True)
